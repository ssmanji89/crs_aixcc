## vulnerability_detection.py
import bandit
from bandit.core import manager
import tempfile
import os

class VulnerabilityDetection:
    def __init__(self):
        self.vulnerabilities = []

    def detect_vulnerability(self, code: str):
        """
        Detect vulnerabilities in the given code using Bandit static code analysis.
        """
        # Save the code to a unique temporary file
        temp_file = tempfile.NamedTemporaryFile(delete=False)
        temp_file.write(code.encode())
        temp_file.close()

        # Run Bandit on the temporary file
        b_mgr = manager.BanditManager(bandit.config.Config(), 'file')
        b_mgr.discover_files([temp_file.name], 'file')
        b_mgr.run_tests()

        # Extract vulnerabilities from Bandit report
        for result in b_mgr.get_issue_list():
            self.vulnerabilities.append({
                'filename': result.fname,
                'line_number': result.lineno,
                'issue_text': result.text,
                'severity': result.severity,
                'confidence': result.confidence
            })

        # Delete the temporary file
        os.unlink(temp_file.name)

        return self.vulnerabilities
