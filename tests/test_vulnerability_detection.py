## test_vulnerability_detection.py
import unittest
import os
from cyber_reasoning_system.vulnerability_detection import VulnerabilityDetection

class TestVulnerabilityDetection(unittest.TestCase):
    def setUp(self):
        self.vd = VulnerabilityDetection()

    def test_detect_vulnerability(self):
        """
        Test detect_vulnerability with a sample vulnerable code.
        """
        # Sample vulnerable code
        code = """
        import os
        os.system('ls')
        """
        vulnerabilities = self.vd.detect_vulnerability(code)
        self.assertIsInstance(vulnerabilities, list)
        self.assertGreater(len(vulnerabilities), 0)
        for vulnerability in vulnerabilities:
            self.assertIsInstance(vulnerability, dict)
            self.assertIn('filename', vulnerability)
            self.assertIn('line_number', vulnerability)
            self.assertIn('issue_text', vulnerability)
            self.assertIn('severity', vulnerability)
            self.assertIn('confidence', vulnerability)

    def test_detect_vulnerability_no_vulnerabilities(self):
        """
        Test detect_vulnerability with a sample non-vulnerable code.
        """
        # Sample non-vulnerable code
        code = """
        print("Hello, World!")
        """
        vulnerabilities = self.vd.detect_vulnerability(code)
        self.assertIsInstance(vulnerabilities, list)
        self.assertEqual(len(vulnerabilities), 0)

    def test_detect_vulnerability_empty_code(self):
        """
        Test detect_vulnerability with an empty code.
        """
        code = ""
        vulnerabilities = self.vd.detect_vulnerability(code)
        self.assertIsInstance(vulnerabilities, list)
        self.assertEqual(len(vulnerabilities), 0)

    def tearDown(self):
        del self.vd

if __name__ == "__main__":
    unittest.main()
